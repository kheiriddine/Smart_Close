import os
import re
import json
import easyocr
import cv2
import pandas as pd
from PIL import Image
import numpy as np
from paddleocr import PaddleOCR
import PyPDF2
from datetime import datetime
from typing import Dict, List, Any, Union
import together

# Configuration API
os.environ["TOGETHER_API_KEY"] = "0fd461c8508202220cfc824cd5b0dc3f7a48cc17f02c55b33a105834945ddb48"

class UnifiedOCRProcessor:
    def __init__(self):
        """Initialise les mod√®les OCR"""
        self.easyocr_reader = easyocr.Reader(['fr'])
        self.paddleocr_model = PaddleOCR(use_angle_cls=True, lang='en')
        self.together_client = together.Together()
        self.accuracy = 0.0  # Pr√©cision r√©elle calcul√©e
        
    def process_document(self, file_path: str, document_type: str) -> Dict[str, Any]:
        """
        Traite un document selon son type
        
        Args:
            file_path (str): Chemin vers le fichier
            document_type (str): Type de document ('facture', 'cheque', 'releve', 'grandlivre')
            
        Returns:
            Dict contenant les donn√©es extraites et la pr√©cision OCR
        """
        print(f"üìÑ Traitement du fichier : {file_path}")
        print(f"üîç Type de document : {document_type}")
        
        if document_type.lower() == 'facture':
            result = self._process_facture(file_path)
        elif document_type.lower() == 'cheque':
            result = self._process_cheque(file_path)
        elif document_type.lower() == 'releve':
            result = self._process_releve(file_path)
        elif document_type.lower() == 'grandlivre':
            result = self._process_grandlivre(file_path)
        else:
            raise ValueError(f"Type de document non support√© : {document_type}")
        
        # Ajouter la pr√©cision OCR au r√©sultat
        result['ocr_accuracy'] = self.accuracy
        print(f"‚úÖ Pr√©cision OCR calcul√©e : {self.accuracy:.1f}%")
        
        return result
    
    def _process_facture(self, file_path: str) -> Dict[str, Any]:
        """Traite une facture (image) avec EasyOCR"""
        # Extraction OCR avec EasyOCR
        results = self.easyocr_reader.readtext(file_path)
        
        # Calculer la pr√©cision r√©elle avec EasyOCR
        confidences = [prob for (bbox, text, prob) in results]
        self.accuracy = np.mean(confidences) * 100 if confidences else 0.0
        
        seuil_confiance = 0.05
        textes_valides = [text for (bbox, text, prob) in results if prob >= seuil_confiance]
        
        if textes_valides:
            contenu = "\n".join(textes_valides)
        else:
            contenu = "[Aucun texte d√©tect√© avec une confiance suffisante]"
        
        # Traitement avec IA
        return self._extract_facture_data(contenu)
    
    def _process_cheque(self, file_path: str) -> Dict[str, Any]:
        """Traite un ch√®que (image) avec PaddleOCR"""
        try:
            result = self.paddleocr_model.ocr(file_path, cls=True)
            
            # Calculer la pr√©cision r√©elle avec PaddleOCR
            confidences = []
            all_text = []
            
            if result:
                for line in result:
                    if isinstance(line, list):
                        for word_info in line:
                            if len(word_info) >= 2 and isinstance(word_info[1], (list, tuple)):
                                if len(word_info[1]) > 1:
                                    confidences.append(word_info[1][1])
                                all_text.append(str(word_info[1][0]))
                
                contenu = "\n".join(all_text)
            else:
                contenu = "[Aucun texte d√©tect√©]"

            # Calculer la pr√©cision moyenne
            self.accuracy = np.mean(confidences) * 100 if confidences else 0.0

            destinataire_probable = self.find_destinataire(contenu)
            return self._extract_cheque_data(contenu, destinataire_probable)

        except Exception as e:
            print(f"Erreur OCR ch√®que : {e}")
            self.accuracy = 0.0
            return {"error": str(e)}
            
    def _process_releve(self, file_path: str) -> Dict[str, Any]:
        """Traite un relev√© bancaire (PDF) - score fixe 85%"""
        # Pour les PDFs, assigner un score fixe de 85%
        self.accuracy = 85.0
        return self._extract_bank_statement_data(file_path)
    
    def _process_grandlivre(self, file_path: str) -> Dict[str, Any]:
        """Traite un grand livre (Excel/CSV) - score fixe 85%"""
        # Pour les fichiers Excel/CSV, assigner un score fixe de 85%
        self.accuracy = 85.0
        return self._extract_grandlivre_data(file_path)
    
    def _extract_facture_data(self, content: str) -> Dict[str, Any]:
        """Extrait les donn√©es de facture avec IA"""
        prompt = f"""
        Tu es un agent intelligent qui extrait des informations structur√©es depuis des documents OCR.

        Voici le texte extrait :

        {content}

        Ta t√¢che est de retourner un objet JSON avec trois champs :
        1. `Nom Societe` : le nom de la soci√©t√© √©mettrice (trouv√© dans l'en-t√™te/logo, g√©n√©ralement en haut de chaque page)
        2. `info payment` : les infos de paiement, comme dans l'exemple ci-dessous.
        3. `table` : une table combin√©e extraite √† partir de toutes les tables visibles dans le texte (les t√¢ches avec les montants factur√©s), au format JSON (type pandas DataFrame).

        Exemple de format :

        {{
            "Nom Societe": "...",
            "info payment": {{
                "Nom du Client": "...",
                "Adresse Client": "...",
                "Num√©ro Facture": "...",
                "Date Facturation": "...",
                "Date Echeance": "...",
                "Type d'op√©ration": "...",
                "Total TTC": ...
            }},
            "table": [
                {{ "Description": "valeur1", "Date": "valeur2", "TVA": "valeur3", "Montant HT": "valeur4", "Total TTC": "valeur5" }},
                ...
            ]
        }}

        R√®gles de formatage STRICTES :
        1. Montants/Date :
          - Toujours en format float
          - corrige les erreurs typiques de l'OCR (O/0, l/1, S/5, etc.) sauf pour les identifiants sensibles.
          - Exemple : Mantant: 3l88z5.oZ ‚Üí 318825.02 , Date: 3l/Oi/202S ‚Üí31/01/2025
          - les dates: Toujours en format ISO fran√ßais (JJ/MM/AAAA)

        IMPORTANT : Assure-toi que le JSON est compl√®tement ferm√©. Ne t'arr√™te pas avant la derni√®re accolade fermante.
        Retourne uniquement le JSON, sans aucun texte autour.
        """

        try:
            response = self.together_client.chat.completions.create(
                model="meta-llama/Llama-3.3-70b-Instruct-Turbo-Free",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=7000,
                temperature=0,
            )
            output = response.choices[0].message.content.strip()
            return self._extract_clean_json(output)
        except Exception as e:
            print(f"Erreur API pour facture : {e}")
            return {}
    
    def _extract_cheque_data(self, content: str, destinataire_probable: str) -> Dict[str, Any]:
        """Extrait les donn√©es de ch√®que avec IA"""
        prompt = f"""
        Tu es un assistant intelligent charg√© d'extraire des informations structur√©es √† partir d'un texte OCR brut d'un ch√®que.
        NB: Le destinataire probable (issu d'une heuristique locale) est : **{destinataire_probable}**
        Texte OCR extrait :
        {content}

        Ta mission est de produire un objet JSON avec les champs suivants :

        {{
            "Banque": "...",
            "Adresse Banque": "...",
            "Emetteur": "...",
            "Adresse Emetteur": "...",
            "Destinataire": "...",
            "Fait √†": "...",
            "Le": "...",
            "Code Banque": "...",
            "Code Guichet": "...",
            "Num√©ro de Compte": "...",
            "Num√©ro de Ch√®que": "...",
            "Montant du Ch√®que": float
        }}

        Contraintes :
        - Si une donn√©e est absente ou illisible, utilise une cha√Æne vide : "".
        - Le champ `Montant du Ch√®que` doit √™tre un float. Corrige les erreurs OCR courantes (ex : O ‚Üí 0, l ‚Üí 1).
        - Le champ `Le` doit √™tre une date au format JJ/MM/AAAA, √©galement corrig√©e si besoin.
        - Retourne uniquement un objet JSON valide, sans texte autour. Encadre-le avec ```json ... ```
        """

        try:
            response = self.together_client.chat.completions.create(
                model="meta-llama/Llama-3.3-70b-Instruct-Turbo-Free",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=4096,
                temperature=0,
            )
            output = response.choices[0].message.content.strip()
            return self._extract_clean_json(output)
        except Exception as e:
            print(f"Erreur API pour ch√®que : {e}")
            return {}
    
    def _extract_bank_statement_data(self, pdf_path: str) -> Dict[str, Any]:
        """Extrait les donn√©es d'un relev√© bancaire PDF"""
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()

        bank_info = self._extract_bank_info(text)
        operations = self._extract_operations(text)

        return {
            "informations_bancaires": bank_info,
            "operations": operations
        }
    
    def _extract_grandlivre_data(self, xlsx_path: str) -> Dict[str, Any]:
        """Extrait les donn√©es d'un grand livre Excel"""

        if xlsx_path.endswith('.csv'):
            df = pd.read_csv(xlsx_path, header=None)
        else:
            df = pd.read_excel(xlsx_path, header=None, engine='openpyxl')

        # Extraction des informations g√©n√©rales
        nom_banque = self._find_cell_value(df, "NOM DE LA BANQUE")
        solde_depart = self._find_cell_valu(df, "SOLDE DE DEPART")
        solde_depart = self._clean_amount(solde_depart)

        #    Extraction de la table des √©critures
        expected_headers = ["date", "n¬∞ compte", "libell√©", "d√©bit", "cr√©dit"]
        start_row, start_col = self._locate_table(df, expected_headers)

        if start_row is not None:
            df_table = df.iloc[start_row:, start_col:start_col+len(expected_headers)]
            df_table.columns = expected_headers
            df_table = df_table.dropna(how='all')

            # Convert datetime objects to strings
            if 'date' in df_table.columns:
                df_table['date'] = pd.to_datetime(df_table['date'], errors='coerce').dt.strftime('%d/%m/%Y')
                # Remplacement des NaT par des cha√Ænes vides
                df_table['date'] = df_table['date'].fillna('')

            ecritures = df_table.to_dict('records')
        else:
            ecritures = []

        return {
        "informations_generales": {
            "nom_banque": nom_banque,
            "solde_depart": solde_depart
        },
        "ecritures_comptables": ecritures
        }

    def is_probable_name(self, line):
        """D√©termine si une ligne contient probablement un nom de personne ou d'entreprise."""
        line = line.strip()
        return (
            3 <= len(line) <= 60 and
            bool(re.match(r"^[A-Z√â√à√ä√é√î][a-zA-Z√©√®√™√Æ√¥√ß√†√¢\s'\-]{2,}$", line)) and
            "banque" not in line.lower() and
            not re.search(r"^\d+$", line)
        )

    def extract_dest_after_amount(self, lines):
        pattern = re.compile(
            r"([a-zA-Z√©√®√™√†√¢√π√ß\s\-]+euros?\s+et\s+[a-zA-Z\s\-]+centimes?)", re.IGNORECASE)

        for i, line in enumerate(lines):
            if pattern.search(line):
                if i + 1 < len(lines):
                    next_line = lines[i + 1].strip()
                    next_line = re.sub(r"[,.\s]*$", "", next_line)
                    next_line = re.sub(r"^A\s+", "", next_line, flags=re.IGNORECASE)
                    if self.is_probable_name(next_line):
                        return next_line
                    elif i + 2 < len(lines):
                        next_line2 = lines[i + 2].strip()
                        next_line2 = re.sub(r"[,.\s]*$", "", next_line2)
                        next_line2 = re.sub(r"^A\s+", "", next_line2, flags=re.IGNORECASE)
                        if self.is_probable_name(next_line2):
                            return next_line2
        return None

    def find_destinataire(self, text):
        lines = [l.strip() for l in text.splitlines() if l.strip()]

        dest_after_amount = self.extract_dest_after_amount(lines)
        if dest_after_amount:
            return dest_after_amount

        for i, line in enumerate(lines):
            match = re.search(r"(?:√†\s+l['']ordre\s+de|ordre\s+de)[:\s]*([^\n]*)", line, flags=re.IGNORECASE)
            if match:
                name = match.group(1).strip()
                if name:
                    return name
                elif i + 1 < len(lines) and self.is_probable_name(lines[i + 1]):
                    return lines[i + 1]

        for i, line in enumerate(lines):
            if re.search(r"\b(Fait √†|Le)\b", line, flags=re.IGNORECASE):
                for j in range(i - 1, max(i - 3, -1), -1):
                    if self.is_probable_name(lines[j]):
                        return lines[j]

        return "Destinataire inconnu"
    
    def _extract_clean_json(self, text: str) -> Dict[str, Any]:
        """Extrait et nettoie le JSON de la r√©ponse"""
        # Extraire bloc entre ``` ou utiliser tout le texte
        match = re.search(r"```(?:json)?\s*(\{.*?\})\s*```", text, re.DOTALL)
        json_candidate = match.group(1) if match else text.strip()

        print(f"Taille brute du JSON candidat : {len(json_candidate)} caract√®res")

        # Tentative de parsing strict
        try:
            return json.loads(json_candidate)
        except json.JSONDecodeError as e:
            print(f"Erreur de parsing JSON brut : {e}")
            return {}
    
    # M√©thodes utilitaires pour relev√© bancaire
    def _extract_solde_precedent(self, text: str) -> float:
        """Extrait le solde pr√©c√©dent"""
        pattern = r'SOLDE\s+PR[√âE]C[√âE]DENT\s+AU\s+(\d\s?\d/\d{1,2}/\d{4})\s+([\d\s.,]+)'
        match = re.search(pattern, text, flags=re.IGNORECASE)
        
        if match:
            montant_str = match.group(2).replace(' ', '').replace(',', '.')
            try:
                return float(montant_str)
            except ValueError:
                return 0.0
        else:
            return 0.0
    
    def _extract_bank_info(self, text: str) -> Dict[str, Any]:
        """Extrait les informations g√©n√©rales du relev√© bancaire"""
        # Recherche du SIRET
        siret_match = re.search(r'N¬∞\s*SIRET\s*:\s*(\d+)', text)
        siret = siret_match.group(1) if siret_match else "Non trouv√©"

        # Recherche de l'adresse
        address_match = re.search(r'(\d{1,3}\s+[^\n,]+),?\s*(\d{5})\s+([A-Za-z√Ä-√ø\-\'\s]+)', text)
        address = f"{address_match.group(1)}, {address_match.group(2)}" if address_match else "Non trouv√©"

        # Recherche des dates de relev√©
        date_period_match = re.search(r'Du\s+(\d{2}/\d{2}/\d{4})\s+au\s+(\d{2}/\d{2}/\d{4})', text)
        date_debut = date_period_match.group(1) if date_period_match else "Non trouv√©"
        date_fin = date_period_match.group(2) if date_period_match else "Non trouv√©"

        # Recherche du num√©ro de compte
        account_match = re.search(r'n¬∞\s*([A-Z]{2}\d{2}\s*\d{5}\s*\d{5}\s*\d{11}\s*\d{2})', text)
        account_number = account_match.group(1).replace(' ', '') if account_match else "Non trouv√©"

        # Recherche des codes bancaires
        code_banque_match = re.search(r'Code Banque:\s*(\d+)', text)
        code_guichet_match = re.search(r'Code Guichet:\s*(\d+)', text)
        numero_compte_match = re.search(r'N¬∞\s*Compte:\s*(\d+)', text)

        code_banque = code_banque_match.group(1) if code_banque_match else "Non trouv√©"
        code_guichet = code_guichet_match.group(1) if code_guichet_match else "Non trouv√©"
        numero_compte = numero_compte_match.group(1) if numero_compte_match else "Non trouv√©"

        # Recherche du solde pr√©c√©dent
        solde_precedent = self._extract_solde_precedent(text)

        # Recherche du titulaire du compte
        titulaire_match = re.search(r'COMPTE PROFESSIONNEL[^A-Z]*([A-Z][A-Za-z\s\(\)&-]+)', text)
        titulaire = titulaire_match.group(1).strip() if titulaire_match else "Non trouv√©"

        return {
            "banque": "BNP Paribas",
            "siret": siret,
            "adresse_banque": address,
            "periode_releve": {
                "date_debut": date_debut,
                "date_fin": date_fin
            },
            "informations_compte": {
                "titulaire": titulaire,
                "numero_compte_complet": account_number,
                "code_banque": code_banque,
                "code_guichet": code_guichet,
                "numero_compte": numero_compte,
                "solde_precedent": solde_precedent
            }
        }
    
    def _extract_operations(self, text: str) -> List[Dict[str, Any]]:
        """Extrait les op√©rations bancaires"""
        operations = []

        # Prendre seulement le texte √† partir de la section des op√©rations
        match = re.search(r'RELEV[√âE]\s+DES\s+OP[√âE]RA TIONS\s+(.*)', text, re.IGNORECASE | re.DOTALL)
        if not match:
            return operations

        text = match.group(1)
        # Format: Date Nature_operation D√©bit/Cr√©dit
        operation_pattern = r'(\d{2}/\d{2}/\d{4})\s+(.*?)\s+([\d\s,]+)(?:\n|$)'
        matches = re.findall(operation_pattern, text, re.MULTILINE)

        for match in matches:
            date_str = match[0]
            nature = match[1].strip()
            montant_str = match[2].replace(' ', '').replace(',', '.')

            # D√©terminer si c'est un d√©bit ou cr√©dit
            is_debit = any(keyword in nature.upper() for keyword in ['PAIEMENT', 'CHEQUE √Ä'])

            try:
                montant = float(montant_str)
            except ValueError:
                montant = 0.0

            operation = {
                "date": date_str,
                "nature": nature.strip(),
                "montant": montant,
                "type": "d√©bit" if is_debit else "cr√©dit"
            }

            operations.append(operation)

        return operations
    
    # M√©thodes utilitaires pour grand livre
    def _find_cell_value(self, df, target_keyword):
        """Trouve une valeur dans la cellule √† droite du mot-cl√©"""
        for i, row in df.iterrows():
            for j, cell in enumerate(row):
                if isinstance(cell, str) and target_keyword.lower() in cell.lower():
                    return df.iat[i, j + 1] if j + 1 < df.shape[1] else None
        return None

    def _find_cell_valu(self, df, target_keyword):
        """Trouve une valeur dans la cellule en dessous du mot-cl√©"""
        for i, row in df.iterrows():
            for j, cell in enumerate(row):
                if isinstance(cell, str) and target_keyword.lower() in cell.lower():
                    return df.iat[i+1, j] if i+1 < df.shape[0] else None
        return None
    
    def _clean_amount(self, val):
        """Nettoie un montant"""
        if pd.isna(val):
            return 0.0
        val = str(val).replace(',', '').replace('‚Ç¨', '').strip()
        try:
            return float(val)
        except:
            return val
    
    def _locate_table(self, df, expected_headers):
        """Localise une table avec des en-t√™tes sp√©cifiques"""
        for i, row in df.iterrows():
            for j in range(len(row) - len(expected_headers) + 1):
                window = row.iloc[j:j+len(expected_headers)].astype(str).str.lower().str.strip().tolist()
                if window == expected_headers:
                    return i, j
        return None, None
    
    def save_output(self, data: Dict[str, Any], file_path: str):
        """Sauvegarde les r√©sultats dans un fichier JSON"""
        # Cr√©ation du nom de fichier de sortie
        base_name = os.path.splitext(os.path.basename(file_path))[0]
        directory = os.path.dirname(file_path)
        output_file_path = os.path.join(directory, f"Output_{base_name}.json")
        
        # Sauvegarde
        with open(output_file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ JSON sauvegard√© dans : {output_file_path}")
        return output_file_path

def process_document_cli(file_path: str, document_type: str):
    """
    Fonction utilitaire pour traiter un document
    
    CORRECTION: Retourne maintenant 3 valeurs au lieu de 2
    """
    processor = UnifiedOCRProcessor()
    try:
        data = processor.process_document(file_path, document_type)
        output_path = processor.save_output(data, file_path)
        # CORRECTION: Retourner 3 valeurs (data, output_path, accuracy)
        return data, output_path, processor.accuracy
    except Exception as e:
        print(f"‚ùå Erreur lors du traitement : {e}")
        # CORRECTION: Retourner 3 valeurs m√™me en cas d'erreur
        return None, None, 0.0

def main():
    """Fonction principale pour l'appel en ligne de commande"""
    import sys
    
    # V√©rification des arguments
    if len(sys.argv) != 3:
        print("‚ùå Usage incorrect !")
        print("üìñ Usage : python pipeline.py <chemin_fichier> <type_document>")
        print("üìã Types support√©s : facture, cheque, releve, grandlivre")
        print("\nüîπ Exemples :")
        print("   python pipeline.py image.png facture")
        print("   python pipeline.py cheque.jpg cheque")
        print("   python pipeline.py releve.pdf releve")
        print("   python pipeline.py grand_livre.xlsx grandlivre")
        sys.exit(1)
    
    file_path = sys.argv[1]
    document_type = sys.argv[2].lower()
    
    # V√©rification du type de document
    valid_types = ['facture', 'cheque', 'releve', 'grandlivre']
    if document_type not in valid_types:
        print(f"‚ùå Type de document invalide : {document_type}")
        print(f"üìã Types support√©s : {', '.join(valid_types)}")
        sys.exit(1)
    
    # V√©rification de l'existence du fichier
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier introuvable : {file_path}")
        sys.exit(1)
    
    # Traitement du document
    print(f"üöÄ D√©marrage du traitement...")
    print(f"üìÑ Fichier : {file_path}")
    print(f"üè∑Ô∏è  Type : {document_type}")
    print("-" * 50)
    
    data, output_path, accuracy = process_document_cli(file_path, document_type)
    
    if data and output_path:
        print("-" * 50)
        print(f"‚úÖ Traitement termin√© avec succ√®s !")
        print(f"üíæ R√©sultat sauvegard√© dans : {output_path}")
        print(f"üìä Pr√©cision OCR : {accuracy:.1f}%")
        
        # Affichage d'un r√©sum√© des donn√©es extraites
        if document_type == 'facture' and 'Nom Societe' in data:
            print(f"üè¢ Soci√©t√© : {data.get('Nom Societe', 'N/A')}")
            if 'info payment' in data and 'Total TTC' in data['info payment']:
                print(f"üí∞ Total TTC : {data['info payment']['Total TTC']}")
        
        elif document_type == 'cheque' and 'Banque' in data:
            print(f"üè¶ Banque : {data.get('Banque', 'N/A')}")
            print(f"üí∞ Montant : {data.get('Montant du Ch√®que', 'N/A')}")
        
        elif document_type == 'releve' and 'informations_bancaires' in data:
            print(f"üè¶ Banque : {data['informations_bancaires'].get('banque', 'N/A')}")
            print(f"üìä Nb op√©rations : {len(data.get('operations', []))}")
        
        elif document_type == 'grandlivre' and 'informations_generales' in data:
            print(f"üè¶ Banque : {data['informations_generales'].get('nom_banque', 'N/A')}")
            print(f"üí∞ Solde d√©part : {data['informations_generales'].get('solde_depart', 'N/A')}")
    
    else:
        print("-" * 50)
        print("‚ùå √âchec du traitement. V√©rifiez les erreurs ci-dessus.")
        sys.exit(1)

if __name__ == "__main__":
    main()
